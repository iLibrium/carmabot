import asyncpg
import logging
from config import Config

class Database:
    def __init__(self):
        self._pool = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            if not self._pool:
                self._pool = await asyncpg.create_pool(
                    user=Config.DB_USER,
                    password=Config.DB_PASSWORD,
                    database=Config.DB_NAME,
                    host=Config.DB_HOST,
                    port=Config.DB_PORT,
                    min_size=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    max_size=10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    timeout=10  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                )
                logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self._pool = None

    async def ensure_connection(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"""
        if not self._pool:
            logging.warning("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await self.connect()
        if not self._pool:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            return None
        return await self._pool.acquire()

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        if self._pool:
            await self._pool.close()
            logging.info("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            self._pool = None

    async def get_user(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ user_id."""
        conn = await self.ensure_connection()
        if not conn:
            return None
        try:
            query = "SELECT first_name, last_name, phone_number FROM users WHERE user_id = $1"
            user_data = await conn.fetchrow(query, user_id)
            return dict(user_data) if user_data else None
        finally:
            await self._pool.release(conn)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    async def register_user(self, user_id: int, first_name: str, last_name: str, phone_number: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = await self.ensure_connection()
        if not conn:
            return
        try:
            query = """
            INSERT INTO users (user_id, first_name, last_name, phone_number)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO UPDATE
            SET first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                phone_number = EXCLUDED.phone_number
            """
            await conn.execute(query, user_id, first_name, last_name, phone_number)
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        finally:
            await self._pool.release(conn)

    async def create_issue(self, user_id: int, tracker_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = await self.ensure_connection()
        if not conn:
            return
        try:
            query = """
            INSERT INTO issues (user_id, tracker_id)
            VALUES ($1, $2)
            """
            await conn.execute(query, user_id, tracker_id)
            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {tracker_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        finally:
            await self._pool.release(conn)

    async def get_user_issues(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = await self.ensure_connection()
        if not conn:
            return []
        try:
            query = "SELECT tracker_id FROM issues WHERE user_id = $1"
            rows = await conn.fetch(query, user_id)
            return [row["tracker_id"] for row in rows]
        finally:
            await self._pool.release(conn)
