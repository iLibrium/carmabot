import aiohttp
import logging
from config import Config

class TrackerAPI:
    def __init__(self, session: aiohttp.ClientSession = None):
        self.base_url = "https://api.tracker.yandex.net/v2"
        self.upload_url = f"{self.base_url}/attachments"
        self.headers = {
            "Authorization": f"Bearer {str(Config.TRACKER_TOKEN).strip()}",
            "X-Cloud-Org-ID": str(Config.TRACKER_ORG_ID).strip()
        }
        self._session = session or aiohttp.ClientSession()  # ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        self.queue = Config.TRACKER_QUEUE

    async def get_session(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é."""
        if not self._session:
            self._session = aiohttp.ClientSession()
        return self._session

    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞."""
        if self._session:
            await self._session.close()
            self._session = None

    async def upload_file(self, file_path: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Yandex Tracker."""
        uploaded_files = await self.upload_files([file_path])
        return uploaded_files[0] if uploaded_files else None

    async def upload_files(self, file_paths: list):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ Yandex Tracker –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏—Ö ID."""
        attachment_ids = []
        session = await self.get_session()

        for file_path in file_paths:
            try:
                logging.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_path}")

                async with session.post(
                    self.upload_url,
                    headers=self.headers,
                    data={"file": open(file_path, "rb")}
                ) as response:

                    response_json = await response.json()
                    logging.info(f"üì• –û—Ç–≤–µ—Ç API: {response.status} - {response_json}")

                    if response.status != 201:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {response_json}")
                        continue

                    file_id = response_json.get("id")
                    if file_id:
                        attachment_ids.append(file_id)

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        return attachment_ids

    # –í–Ω—É—Ç—Ä–∏ TrackerAPI
    async def get_issue_details(self, issue_keys: list[str]):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–∞–º."""
        session = await self.get_session()
        details = []

        for key in issue_keys:
            try:
                async with session.get(
                    f"{self.base_url}/issues/{key}",
                    headers=self.headers
                ) as response:
                    response_json = await response.json()
                    if response.status == 200:
                        details.append(response_json)
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {key}: {response.status} - {response_json}")
            except Exception as e:
                logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {key}: {e}")

        return details

    async def get_active_issues_by_telegram_id(self, telegram_id: int):
        query = {
            "filter": {
                "queue": self.queue,
                "telegramId": str(telegram_id)
            }
        }

        session = await self.get_session()  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        try:
            async with session.post(
                f"{self.base_url}/issues/_search",
                headers=self.headers,
                json=query
            ) as response:
                response_json = await response.json()
                logging.info(f"üì• –û—Ç–≤–µ—Ç API (–ø–æ–∏—Å–∫ –∑–∞–¥–∞—á): {response.status} - {response_json}")

                if response.status != 200:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á: {response_json}")
                    return []

                return response_json

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á: {e}")
            return []

    async def create_issue(self, title: str, description: str, attachment_ids=None, telegram_id=None):
        session = await self.get_session()
        issue_data = {
            "queue": Config.TRACKER_QUEUE,
            "summary": title,
            "description": description
        }

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º telegram_id –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–ª–µ
        if telegram_id:
            issue_data["telegramId"] = str(telegram_id)

        if isinstance(attachment_ids, list) and attachment_ids:
            filtered_ids = [int(fid) for fid in attachment_ids if str(fid).isdigit()]
            if filtered_ids:
                issue_data["attachmentIds"] = filtered_ids

        try:
            async with session.post(
                f"{self.base_url}/issues",
                headers=self.headers,
                json=issue_data
            ) as response:
                response_json = await response.json()
                logging.info(f"üì• –û—Ç–≤–µ—Ç API (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏): {response.status} - {response_json}")

                if response.status != 201:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response_json}")
                    return None

                return response_json
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return None

    async def get_issue(self, issue_key: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏."""
        session = await self.get_session()
        try:
            async with session.get(
                f"{self.base_url}/issues/{issue_key}",
                headers=self.headers
            ) as response:

                response_json = await response.json()
                if response.status != 200:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ {issue_key}: {response_json}")
                    return None

                return response_json

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏ {issue_key}: {e}")
            return None

    async def add_comment(self, issue_key: str, comment_text: str, attachment_ids=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–¥–∞—á—É."""
        session = await self.get_session()
        comment_data = {"text": comment_text}

        if attachment_ids:
            comment_data["attachments"] = [{"id": file_id} for file_id in attachment_ids]

        try:
            async with session.post(
                f"{self.base_url}/issues/{issue_key}/comments",
                headers=self.headers,
                json=comment_data
            ) as response:

                response_json = await response.json()
                if response.status != 201:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response_json}")
                    return None

                return response_json

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ {issue_key}: {e}")
            return None
